{"version":3,"sources":["main/navigation/Navigation.tsx","main/top-bar/TopBar.tsx","main/exercises/Exercise.tsx","main/exercises/ExercisesContainer.tsx","main/Main.tsx","serviceWorker.ts","index.tsx"],"names":["StyledWrapper","styled","div","Lesson","Link","GroupWrapper","Navigation","exercises","map","e","i","renderExercises","exercise","index","parentIndex","Array","isArray","children","name","ex","to","join","Title","span","TopBar","src","Exercise","exerciseId","useParams","ExercisesContainer","path","WebFontLoader","load","google","families","GlobalStyle","createGlobalStyle","ContentWrapper","Exercises","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2uBAKA,IAAMA,EAAgBC,IAAOC,IAAV,KAObC,EAASF,YAAOG,IAAPH,CAAH,KASNI,EAAeJ,IAAOC,IAAV,KA8BHI,EAJI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,UACpB,OAAO,kBAACP,EAAD,KAAgBO,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OApBf,SAAlBC,EACJC,EACAC,GAEsB,IADtBC,EACqB,uDADG,GAExB,MAAI,aAAcF,GAAYG,MAAMC,QAAQJ,EAASK,UAEjD,kBAACZ,EAAD,KACGO,EAASM,KACV,6BACGN,EAASK,SAAST,KAAI,SAACW,EAAIT,GAAL,OAAWC,EAAgBQ,EAAIT,EAAL,sBAAYI,GAAZ,CAAyBD,EAAQ,UAMnF,kBAACV,EAAD,CAAQiB,GAAE,qBAAgBN,EAAYO,KAAK,KAAjC,YAAyCR,EAAQ,IAAMD,EAASM,MAIlCP,CAAgBF,EAAGC,Q,oSC7CpE,IAAMV,EAAgBC,IAAOC,IAAV,KAUboB,EAAQrB,IAAOsB,KAAV,KAcIC,EATA,WACb,OACE,kBAAC,EAAD,KACE,yBAAKC,IAAI,eACT,kBAACH,EAAD,yB,OCdSI,EALE,WAAO,IACdC,EAAeC,cAAfD,WACR,OAAO,oCAAUA,ICUJE,EAXY,WACzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,0BACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAUV,GAAG,qB,qOCDnBW,IAAcC,KAAK,CAAEC,OAAQ,CAAEC,SAAU,CAAC,mCAC1C,IAAMC,EAAcC,YAAH,KAOXC,EAAiBpC,IAAOC,IAAV,KAIdoC,EAA8B,CAClC,CACEpB,KAAM,SACND,SAAU,CACR,CACEC,KAAM,kBAIZ,CACEA,KAAM,YACND,SAAU,CACR,CACEC,KAAM,oBAER,CACEA,KAAM,0BACND,SAAU,CACR,CACEC,KAAM,oBAER,CACEA,KAAM,gCAoBHqB,EAbF,WACX,OACE,kBAAC,IAAD,KACE,kBAACJ,EAAD,MACA,kBAAC,EAAD,MACA,kBAACE,EAAD,KACE,kBAAC,EAAD,CAAY9B,UAAW+B,IACvB,kBAAC,EAAD,SC5CYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCbnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb1a7b6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { NavigationItem } from 'main/types';\r\n\r\nconst StyledWrapper = styled.div`\r\n  width: 300px;\r\n  height: calc(100vh - 65px);\r\n  border-right: 1px solid lightgray;\r\n  padding: 8px;\r\n`;\r\n\r\nconst Lesson = styled(Link)`\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  text-decoration: none;\r\n  color: unset;\r\n  cursor: pointer;\r\n  display: block;\r\n`;\r\n\r\nconst GroupWrapper = styled.div`\r\n  font-weight: 500;\r\n  & > div {\r\n    margin-left: 16px;\r\n  }\r\n`;\r\n\r\nconst renderExercises = (\r\n  exercise: NavigationItem,\r\n  index: number,\r\n  parentIndex: number[] = [],\r\n): React.ReactChild => {\r\n  if ('children' in exercise && Array.isArray(exercise.children)) {\r\n    return (\r\n      <GroupWrapper>\r\n        {exercise.name}\r\n        <div>\r\n          {exercise.children.map((ex, i) => renderExercises(ex, i, [...parentIndex, index + 1]))}\r\n        </div>\r\n      </GroupWrapper>\r\n    );\r\n  }\r\n\r\n  return <Lesson to={`/exercises/${parentIndex.join('.')}.${index + 1}`}>{exercise.name}</Lesson>;\r\n};\r\n\r\nconst Navigation = ({ exercises }: { exercises: NavigationItem[] }) => {\r\n  return <StyledWrapper>{exercises.map((e, i) => renderExercises(e, i))}</StyledWrapper>;\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledWrapper = styled.div`\r\n  padding: 8px;\r\n  border-bottom: 1px solid lightgray;\r\n  display: flex;\r\n\r\n  img {\r\n    height: 45px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 30px;\r\n  margin-left: 4px;\r\n`;\r\n\r\nconst TopBar = () => {\r\n  return (\r\n    <StyledWrapper>\r\n      <img src='/xpath.png' />\r\n      <Title>XPath Tutorial</Title>\r\n    </StyledWrapper>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Exercise = () => {\r\n  const { exerciseId } = useParams<{ exerciseId: string }>();\r\n  return <div>Exc {exerciseId}</div>;\r\n};\r\n\r\nexport default Exercise;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Exercise from './Exercise';\r\n\r\nconst ExercisesContainer = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path='/exercises/:exerciseId'>\r\n        <Exercise />\r\n      </Route>\r\n      <Redirect to='/exercises/1.1' />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default ExercisesContainer;\r\n","import React from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport WebFontLoader from 'webfontloader';\r\nimport Navigation from './navigation/Navigation';\r\nimport TopBar from './top-bar/TopBar';\r\nimport ExercisesContainer from './exercises/ExercisesContainer';\r\nimport { NavigationItem } from './types';\r\n\r\nWebFontLoader.load({ google: { families: ['Hind:100,300,400,500,700,900'] } });\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    font-family: 'Hind', sans-serif;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Exercises: NavigationItem[] = [\r\n  {\r\n    name: 'Basics',\r\n    children: [\r\n      {\r\n        name: 'XPath Basics',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'Selectors',\r\n    children: [\r\n      {\r\n        name: 'Select Something',\r\n      },\r\n      {\r\n        name: 'Select Something useful',\r\n        children: [\r\n          {\r\n            name: 'Select Something',\r\n          },\r\n          {\r\n            name: 'Select Something useful',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\nconst Main = () => {\r\n  return (\r\n    <Router>\r\n      <GlobalStyle />\r\n      <TopBar />\r\n      <ContentWrapper>\r\n        <Navigation exercises={Exercises} />\r\n        <ExercisesContainer />\r\n      </ContentWrapper>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './main/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}